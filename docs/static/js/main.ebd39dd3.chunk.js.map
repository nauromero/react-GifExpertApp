{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAkBjD,OACC,0BAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfd,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,Y,uBCTZG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACP,mCADO,SAEHC,MAAM,yCAAD,OAA0CC,UAAUH,GAApD,4BADT,qCADO,cAEhBI,EAFgB,gBAGCA,EAAKC,OAHN,uBAGdC,EAHc,EAGdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QARd,kBAYfL,GAZe,4CAAH,sDCEPQ,EAAc,SAAC,GAAuB,EAArBL,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxC,OACC,yBAAKI,UAAU,0CACd,yBAAKC,IAAKL,EAAKM,IAAKP,IACpB,2BAAIA,KCFMQ,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EACdd,mBAAS,CAClCoB,KAAM,GACNc,SAAS,IAH8B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAACC,GACvBH,EAAS,CACRhB,KAAMmB,EACNL,SAAS,SAGT,CAACpB,IAEGqB,EDb2BK,CAAY,cAAhCb,EAD0B,EAChCP,KAAcc,EADkB,EAClBA,QAEtB,OACC,oCACC,4BAAKpB,GAAY,cAEhBoB,GAAW,sCAEZ,yBAAKJ,UAAU,aACbH,EAAOL,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEWpBmB,EAtBM,WAAO,IAAD,EACU1C,mBAAS,CAAC,KADpB,mBACnB2C,EADmB,KACP5C,EADO,KAQ1B,OACC,oCACC,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACE4C,EAAWrB,KAAI,SAACR,GAAD,OACf,kBAAC,EAAD,CAASA,SAAUA,EAAU2B,IAAK3B,U,MCdvC8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.ebd39dd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\tconst [inputValue, setInputValue] = useState('');\n\t// useState() = undefined = uncontrolled\n\t// useState('') = '' = controlled\n\n\tconst handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tif (inputValue.trim().length > 2) {\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type='text' value={inputValue} onChange={handleInputChange} />\n\t\t</form>\n\t);\n};\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n\tconst apiKey = 'jlm4ReXopYJ6VMCAwGMmU4edecRk1kqy';\n\tconst resp = await fetch(`http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=${apiKey}`);\n\tconst { data } = await resp.json();\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t};\n\t});\n\n\treturn gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n\treturn (\n\t\t<div className='card animate__animated animate__fadeIn'>\n\t\t\t<img src={url} alt={title}></img>\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { useFetchGif } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useFetchGif('Evangelion');\n\n\treturn (\n\t\t<>\n\t\t\t<h3>{category || 'evangelion'}</h3>\n\n\t\t\t{loading && <p>Loading</p>}\n\n\t\t\t<div className='card-grid'>\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGif = (category) => {\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGifs(category).then((imgs) => {\n\t\t\tsetState({\n\t\t\t\tdata: imgs,\n\t\t\t\tloading: false,\n\t\t\t});\n\t\t});\n\t}, [category]);\n\n\treturn state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\tconst [categories, setCategories] = useState(['']);\n\n\t// const handleAdd = () => {\n\t// \t// con el operador spread extraigo las categorias y agrego una nueva\n\t// \tsetCategories([...categories, 'Verga']);\n\t// };\n\n\treturn (\n\t\t<>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t<ol>\n\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t<GifGrid category={category} key={category} />\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n\nexport default GifExpertApp;\n\n// jlm4ReXopYJ6VMCAwGMmU4edecRk1kqy\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}